this is my paackage  i want to add service layer in this so edit the codes files acoordingly so that add bussiness login in sercie layer if i have witten that in below files make changes accordinly

pacakages

com.conn->DbConnect.java

com.dao->EmployeeDAO.java,UserDAO.java

com.entity->Employee.java,User.java

com.servlet->AddEmployeeServlet.java,DeleteEmployeeServlet,Login.java,RegisterServlet.java



DbConnect.java

package com.conn;

import java.sql.Connection;
import java.sql.DriverManager;


public class DbConnect {
	private static Connection conn=null;
	public static Connection getConn()
	{
		
		
		
		try {
			
		Class.forName("oracle.jdbc.driver.OracleDriver");
		conn=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe","intcu","INTCU_pwd");
		System.out.print("connnnectedddd");
		
     
		
		}
		catch(Exception e)
		{
			e.printStackTrace();
			System.out.print("notconnectedddd");
		}
		return conn;
	}
	
	

}

>EmployeeDAO.java

package com.dao;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import com.conn.DbConnect;
import com.entity.Employee;

public class EmployeeDAO {
    private Connection conn;

    public EmployeeDAO(Connection conn) { this.conn = conn; }

   

    public List<Employee> getAllEmployees() {
        List<Employee> list = new ArrayList<>();
        try {
            String query = "SELECT * FROM INTSO.EMPLOYEE";
            PreparedStatement ps = conn.prepareStatement(query);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                Employee emp = new Employee();
                emp.setEmpSeqId(rs.getInt("EMP_SEQ_ID"));
                emp.setEmpId(rs.getString("EMP_ID")); 
                emp.setEmpName(rs.getString("EMP_NAME"));
                emp.setEmpDeptId(rs.getInt("EMP_DEPT_ID"));
                emp.setEmpPerDaySal(rs.getDouble("EMP_PER_DAY_SAL"));
                emp.setStatus(rs.getString("STATUS"));
                emp.setDtCreated(rs.getString("DT_CREATED"));
                emp.setCreatedBy(rs.getInt("CREATED_BY"));
                emp.setDtUpdated(rs.getString("DT_UPDATED"));
                emp.setUpdatedBy(rs.getInt("UPDATED_BY"));
                list.add(emp);
            }
        } catch (Exception e) { e.printStackTrace(); }
        return list;
    }
    
    public boolean updateEmployee(Employee emp) {
        boolean status = false;
        try {
            String query = "UPDATE INTSO.EMPLOYEE SET EMP_NAME=?, EMP_DEPT_ID=?, EMP_PER_DAY_SAL=?, STATUS=?, DT_UPDATED=SYSTIMESTAMP, UPDATED_BY=? WHERE EMP_SEQ_ID=?";
            PreparedStatement ps = conn.prepareStatement(query);
            ps.setString(1, emp.getEmpName());
            ps.setInt(2, emp.getEmpDeptId());
            ps.setDouble(3, emp.getEmpPerDaySal());
            ps.setString(4, emp.getStatus());
            ps.setInt(5, emp.getUpdatedBy());
            ps.setInt(6, emp.getEmpSeqId());
            status = ps.executeUpdate() > 0;
        } catch (Exception e) { e.printStackTrace(); }
        return status;
    }
    

    public boolean addEmployee(Employee emp) {
        boolean status = false;
        try {
        	String query = "INSERT INTO INTSO.EMPLOYEE (EMP_SEQ_ID, EMP_ID, EMP_NAME, EMP_DEPT_ID, EMP_PER_DAY_SAL, STATUS, DT_CREATED, CREATED_BY, DT_UPDATED, UPDATED_BY) VALUES (INTSO.EMP_SEQ_ID.nextval, ?, ?, ?, ?, ?, SYSTIMESTAMP, ?, SYSTIMESTAMP, ?)";
        	PreparedStatement ps = conn.prepareStatement(query);

        	ps.setString(1, emp.getEmpId());
        	ps.setString(2, emp.getEmpName());
        	ps.setInt(3, emp.getEmpDeptId());
        	ps.setDouble(4, emp.getEmpPerDaySal());
        	ps.setString(5, emp.getStatus());
        	ps.setInt(6, emp.getCreatedBy());
        	ps.setInt(7, emp.getUpdatedBy());

            status = ps.executeUpdate() > 0;
        } catch (Exception e) { e.printStackTrace(); }
        return status;
    }

    public boolean deleteEmployee(int empSeqId) {
        boolean status = false;
        try {
            String query = "DELETE FROM INTSO.EMPLOYEE WHERE EMP_SEQ_ID=?";
            PreparedStatement ps = conn.prepareStatement(query);
            ps.setInt(1, empSeqId);
            status = ps.executeUpdate() > 0;
        } catch (Exception e) { e.printStackTrace(); }
        return status;
    }

    public Employee getEmployeeById(int empId) {
        Employee emp = null;
        try {
            String query = "SELECT * FROM INTSO.EMPLOYEE WHERE EMP_SEQ_ID=?";
            PreparedStatement ps = conn.prepareStatement(query);
            ps.setInt(1, empId);
            ResultSet rs = ps.executeQuery();

            if (rs.next()) {
                emp = new Employee();
                emp.setEmpSeqId(rs.getInt("EMP_SEQ_ID"));
                emp.setEmpId(rs.getString("EMP_ID")); 
                emp.setEmpName(rs.getString("EMP_NAME"));
                emp.setEmpDeptId(rs.getInt("EMP_DEPT_ID"));
                emp.setEmpPerDaySal(rs.getDouble("EMP_PER_DAY_SAL"));
                emp.setStatus(rs.getString("STATUS"));
                emp.setCreatedBy(rs.getInt("CREATED_BY"));
                emp.setUpdatedBy(rs.getInt("UPDATED_BY"));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return emp;
    }


 
}


UserDAO.java

package com.dao;
import java.sql.Connection;
import java.sql.PreparedStatement;
import com.entity.User;

public class UserDAO {
    private Connection conn;

    public UserDAO(Connection conn) {
        this.conn = conn;
    }

    // Validate user login
    public boolean validateUser(String username, String password) {
        boolean status = false;
        try {
            String query = "SELECT user_seq_id FROM Intso.app_user WHERE username=? AND password=?";
            PreparedStatement ps = conn.prepareStatement(query);
            ps.setString(1, username);
            ps.setString(2, password);
            status = ps.executeQuery().next();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return status;
    }

    // Insert new user into the database
    public boolean registerUser(User user) {
        boolean status = false;
        try {
            String query = "INSERT INTO Intso.app_user (user_seq_id, email_address, password, username) VALUES (INTSO.APP_USER_SEQ.nextval, ?, ?, ?)";
            PreparedStatement ps = conn.prepareStatement(query);
           
            ps.setString(1, user.getEmailAddress());
            ps.setString(2, user.getPassword());
            ps.setString(3, user.getUsername());
           


            int rowAffected = ps.executeUpdate();
            status = rowAffected > 0;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return status;
    }
}


entity.java

package com.entity;

public class Employee {
    private int empSeqId;
    private String empId; 
    private String empName;
    private int empDeptId;
    private double empPerDaySal;
    private String status;
    private String dtCreated;
    private int createdBy;
    private String dtUpdated;
    private int updatedBy;

    // Getters and Setters
    public int getEmpSeqId() { return empSeqId; }
    public void setEmpSeqId(int empSeqId) { this.empSeqId = empSeqId; }

    public String getEmpId() { return empId; }
    public void setEmpId(String empId) { this.empId = empId; }

    public String getEmpName() { return empName; }
    public void setEmpName(String empName) { this.empName = empName; }

    public int getEmpDeptId() { return empDeptId; }
    public void setEmpDeptId(int empDeptId) { this.empDeptId = empDeptId; }

    public double getEmpPerDaySal() { return empPerDaySal; }
    public void setEmpPerDaySal(double empPerDaySal) { this.empPerDaySal = empPerDaySal; }

    public String getStatus() { return status; }
    public void setStatus(String status) { this.status = status; }

    public String getDtCreated() { return dtCreated; }
    public void setDtCreated(String dtCreated) { this.dtCreated = dtCreated; }

    public int getCreatedBy() { return createdBy; }
    public void setCreatedBy(int createdBy) { this.createdBy = createdBy; }

    public String getDtUpdated() { return dtUpdated; }
    public void setDtUpdated(String dtUpdated) { this.dtUpdated = dtUpdated; }

    public int getUpdatedBy() { return updatedBy; }
    public void setUpdatedBy(int updatedBy) { this.updatedBy = updatedBy; }
}


user.java


package com.entity;

public class User {
    private int userSeqId;
    private String username;
    private String emailAddress;
    private String password;

    public User(int userSeqId, String username, String emailAddress, String password) {
        this.userSeqId = userSeqId;
        this.username = username;
        this.emailAddress = emailAddress;
        this.password = password;
    }

    public int getUserSeqId() { return userSeqId; }
    public String getUsername() { return username; }
    public String getEmailAddress() { return emailAddress; }
    public String getPassword() { return password; }
}


AddEmployeeServlet.java
package com.servlet;

import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import com.conn.DbConnect;
import com.dao.EmployeeDAO;
import com.entity.Employee;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

@WebServlet("/AddEmployeeServlet")
public class AddEmployeeServlet extends HttpServlet {
    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        Connection conn = DbConnect.getConn();
        EmployeeDAO empDAO = new EmployeeDAO(conn);

        Employee emp = new Employee();
        emp.setEmpId(request.getParameter("emp_id"));
        emp.setEmpName(request.getParameter("emp_name"));
        emp.setEmpDeptId(Integer.parseInt(request.getParameter("emp_dept_id")));
        emp.setEmpPerDaySal(Double.parseDouble(request.getParameter("emp_per_day_sal")));
        emp.setStatus(request.getParameter("status"));
        emp.setCreatedBy(Integer.parseInt(request.getParameter("created_by")));
        emp.setUpdatedBy(Integer.parseInt(request.getParameter("created_by"))); // Initially same as created by

        if (empDAO.addEmployee(emp)) {
            response.sendRedirect("index.jsp");
        } else {
            response.getWriter().write("Error adding employee.");
        }
    }
}



DeleteEmployeeServlet.java

package com.servlet;

import java.io.IOException;
import java.sql.Connection;
import com.conn.DbConnect;
import com.dao.EmployeeDAO;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

@WebServlet("/DeleteEmployeeServlet")
public class DeleteEmployeeServlet extends HttpServlet {
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        Connection conn = DbConnect.getConn();
        EmployeeDAO empDAO = new EmployeeDAO(conn);

        int empSeqId = Integer.parseInt(request.getParameter("emp_seq_id"));

        if (empDAO.deleteEmployee(empSeqId)) {
            response.sendRedirect("index.jsp");
        } else {
            response.getWriter().write("Error deleting employee.");
        }
    }
}

LoginServlet.java

package com.servlet;
import java.io.IOException;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import com.conn.DbConnect;
import com.dao.UserDAO;
import java.sql.Connection;


@WebServlet("/login")
public class LoginServlet extends HttpServlet {
    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String username = request.getParameter("username");
        String password = request.getParameter("password");

        Connection conn = DbConnect.getConn();
        UserDAO userDao = new UserDAO(conn);

        if (userDao.validateUser(username, password)) {
            HttpSession session = request.getSession();
            session.setAttribute("user", username);
            response.sendRedirect("index.jsp");
        } else {
            response.sendRedirect("error.jsp");
        }
    }
}



 RegisterServlet.java

package com.servlet;
import java.io.IOException;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import com.conn.DbConnect;
import com.dao.UserDAO;
import com.entity.User;
import java.sql.Connection;


@WebServlet("/register")
public class RegisterServlet extends HttpServlet {
    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String username = request.getParameter("username");
        String email = request.getParameter("email");
        String password = request.getParameter("password");

        Connection conn = DbConnect.getConn();
        UserDAO userDao = new UserDAO(conn);
        User user = new User(0, username, email, password);

        if (userDao.registerUser(user)) {
            response.sendRedirect("index.jsp");
        } else {
            response.sendRedirect("error.jsp");
        }
    }
}



₹₹₹₹₹₹

solution

To add a service layer to your project, we will introduce a new package com.service and move business logic from DAOs into service classes. Here’s the updated package structure:

com.conn       -> DbConnect.java
com.dao        -> EmployeeDAO.java, UserDAO.java
com.entity     -> Employee.java, User.java
com.service    -> EmployeeService.java, UserService.java
com.servlet    -> AddEmployeeServlet.java, DeleteEmployeeServlet.java, LoginServlet.java, RegisterServlet.java

1. Create EmployeeService.java

package com.service;

import java.sql.Connection;
import java.util.List;
import com.dao.EmployeeDAO;
import com.entity.Employee;

public class EmployeeService {
    private EmployeeDAO employeeDAO;

    public EmployeeService(Connection conn) {
        this.employeeDAO = new EmployeeDAO(conn);
    }

    public List<Employee> getAllEmployees() {
        return employeeDAO.getAllEmployees();
    }

    public Employee getEmployeeById(int empSeqId) {
        return employeeDAO.getEmployeeById(empSeqId);
    }

    public boolean addEmployee(Employee emp) {
        return employeeDAO.addEmployee(emp);
    }

    public boolean updateEmployee(Employee emp) {
        return employeeDAO.updateEmployee(emp);
    }

    public boolean deleteEmployee(int empSeqId) {
        return employeeDAO.deleteEmployee(empSeqId);
    }
}

2. Create UserService.java

package com.service;

import java.sql.Connection;
import com.dao.UserDAO;
import com.entity.User;

public class UserService {
    private UserDAO userDAO;

    public UserService(Connection conn) {
        this.userDAO = new UserDAO(conn);
    }

    public boolean validateUser(String username, String password) {
        return userDAO.validateUser(username, password);
    }

    public boolean registerUser(User user) {
        return userDAO.registerUser(user);
    }
}

3. Update AddEmployeeServlet.java

package com.servlet;

import java.io.IOException;
import java.sql.Connection;
import com.conn.DbConnect;
import com.entity.Employee;
import com.service.EmployeeService;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

@WebServlet("/AddEmployeeServlet")
public class AddEmployeeServlet extends HttpServlet {
    private static final long serialVersionUID = 1L;
    private EmployeeService employeeService;

    public AddEmployeeServlet() {
        Connection conn = DbConnect.getConn();
        this.employeeService = new EmployeeService(conn);
    }

    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        Employee emp = new Employee();
        emp.setEmpId(request.getParameter("emp_id"));
        emp.setEmpName(request.getParameter("emp_name"));
        emp.setEmpDeptId(Integer.parseInt(request.getParameter("emp_dept_id")));
        emp.setEmpPerDaySal(Double.parseDouble(request.getParameter("emp_per_day_sal")));
        emp.setStatus(request.getParameter("status"));
        emp.setCreatedBy(Integer.parseInt(request.getParameter("created_by")));
        emp.setUpdatedBy(Integer.parseInt(request.getParameter("created_by"))); // Initially same as created by

        if (employeeService.addEmployee(emp)) {
            response.sendRedirect("index.jsp");
        } else {
            response.getWriter().write("Error adding employee.");
        }
    }
}

4. Update DeleteEmployeeServlet.java

package com.servlet;

import java.io.IOException;
import java.sql.Connection;
import com.conn.DbConnect;
import com.service.EmployeeService;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

@WebServlet("/DeleteEmployeeServlet")
public class DeleteEmployeeServlet extends HttpServlet {
    private static final long serialVersionUID = 1L;
    private EmployeeService employeeService;

    public DeleteEmployeeServlet() {
        Connection conn = DbConnect.getConn();
        this.employeeService = new EmployeeService(conn);
    }

    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        int empSeqId = Integer.parseInt(request.getParameter("emp_seq_id"));

        if (employeeService.deleteEmployee(empSeqId)) {
            response.sendRedirect("index.jsp");
        } else {
            response.getWriter().write("Error deleting employee.");
        }
    }
}

5. Update LoginServlet.java

package com.servlet;

import java.io.IOException;
import java.sql.Connection;
import com.conn.DbConnect;
import com.service.UserService;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;

@WebServlet("/login")
public class LoginServlet extends HttpServlet {
    private static final long serialVersionUID = 1L;
    private UserService userService;

    public LoginServlet() {
        Connection conn = DbConnect.getConn();
        this.userService = new UserService(conn);
    }

    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String username = request.getParameter("username");
        String password = request.getParameter("password");

        if (userService.validateUser(username, password)) {
            HttpSession session = request.getSession();
            session.setAttribute("user", username);
            response.sendRedirect("index.jsp");
        } else {
            response.sendRedirect("error.jsp");
        }
    }
}

6. Update RegisterServlet.java

package com.servlet;

import java.io.IOException;
import java.sql.Connection;
import com.conn.DbConnect;
import com.entity.User;
import com.service.UserService;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

@WebServlet("/register")
public class RegisterServlet extends HttpServlet {
    private static final long serialVersionUID = 1L;
    private UserService userService;

    public RegisterServlet() {
        Connection conn = DbConnect.getConn();
        this.userService = new UserService(conn);
    }

    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String username = request.getParameter("username");
        String email = request.getParameter("email");
        String password = request.getParameter("password");

        User user = new User(0, username, email, password);

        if (userService.registerUser(user)) {
            response.sendRedirect("index.jsp");
        } else {
            response.sendRedirect("error.jsp");
        }
    }
}

Summary of Changes
	1.	Introduced com.service package:
	•	EmployeeService.java
	•	UserService.java
	2.	Moved business logic from Servlets into Service Layer:
	•	Servlets now use EmployeeService and UserService instead of directly calling DAO methods.
	3.	Updated DAO Usage:
	•	DAO objects are now accessed through service classes, improving code maintainability and separation of concerns.

Your project now follows a proper three-layer architecture (Servlet → Service → DAO), making it more scalable and maintainable. Let me know if you need further modifications!



|||||||||
package com.service;

import com.dao.EmployeeDAO;
import com.entity.Employee;
import com.conn.DbConnect;

import java.sql.Connection;
import java.util.List;

public class EmployeeService {
    private EmployeeDAO employeeDAO;

    public EmployeeService() {
        Connection conn = DbConnect.getConn();
        this.employeeDAO = new EmployeeDAO(conn);
    }

    // Business logic to add employee
    public boolean addEmployee(Employee emp) {
        // Validation: Check if Employee ID and Name are not empty
        if (emp.getEmpId() == null || emp.getEmpId().trim().isEmpty() ||
            emp.getEmpName() == null || emp.getEmpName().trim().isEmpty()) {
            return false; // Invalid data
        }

        // Default value: If status is not provided, set "ACTIVE"
        if (emp.getStatus() == null || emp.getStatus().trim().isEmpty()) {
            emp.setStatus("ACTIVE");
        }

        return employeeDAO.addEmployee(emp);
    }

    // Business logic to update employee
    public boolean updateEmployee(Employee emp) {
        // Ensure valid ID
        if (emp.getEmpSeqId() <= 0) {
            return false; // Invalid ID
        }

        // Ensure salary is not negative
        if (emp.getEmpPerDaySal() < 0) {
            return false; // Invalid salary
        }

        return employeeDAO.updateEmployee(emp);
    }

    // Business logic to delete employee
    public boolean deleteEmployee(int empSeqId) {
        if (empSeqId <= 0) {
            return false; // Invalid ID
        }
        return employeeDAO.deleteEmployee(empSeqId);
    }

    // Retrieve all employees
    public List<Employee> getAllEmployees() {
        return employeeDAO.getAllEmployees();
    }

    // Retrieve a single employee by ID
    public Employee getEmployeeById(int empSeqId) {
        if (empSeqId <= 0) {
            return null; // Invalid ID
        }
        return employeeDAO.getEmployeeById(empSeqId);
    }
}

